//We are using a ESPE32 Heltec Wireless Stick Lite V3 
//Download the TinyGPSPlus library 
******************************************************

#include <TinyGPS++.h>

// Configuration des broches RX/TX pour Serial1
static const int RXPin = 18; // RX du GPS -> TX du GPS
static const int TXPin = 17; // TX du GPS -> RX du GPS
static const uint32_t GPSBaud = 9600; // Baud rate du GPS

// Création de l'objet TinyGPS++
TinyGPSPlus gps;

// Timer pour limiter la fréquence des mises à jour
unsigned long lastUpdate = 0; // Stocke le temps du dernier affichage
const unsigned long updateInterval = 5000; // Intervalle en millisecondes (5 secondes)

void setup() {
  Serial.begin(9600);       // Moniteur série pour afficher les données
  Serial1.begin(GPSBaud, SERIAL_8N1, RXPin, TXPin); // Initialisation de Serial1 pour le GPS
  Serial.println("Lecture des coordonnées GPS...");
}

void loop() {
  // Lire et décoder les données du GPS
  while (Serial1.available() > 0) {
    char c = Serial1.read();
    gps.encode(c); // Décoder les trames GPS
  }

  // Vérifier si l'intervalle de mise à jour est atteint
  if (millis() - lastUpdate >= updateInterval) {
    lastUpdate = millis(); // Mettre à jour le dernier temps d'exécution

    // Si de nouvelles coordonnées sont disponibles
    if (gps.location.isUpdated()) {
      // Récupérer la latitude et la longitude
      float latitude = gps.location.lat();
      float longitude = gps.location.lng();

      // Afficher les coordonnées
      Serial.print("Latitude : ");
      Serial.println(latitude, 6);
      Serial.print("Longitude : ");
      Serial.println(longitude, 6);

      // Générer et afficher un lien Google Maps
      Serial.print("Google Maps : https://www.google.com/maps?q=");
      Serial.print(latitude, 6);
      Serial.print(",");
      Serial.println(longitude, 6);

      Serial.println(); // Espacement pour lisibilité
    } else {
      Serial.println("Pas encore de fix GPS valide...");
    }
  }
}
